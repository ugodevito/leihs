${lines = Line.extend_with_consecutive_numbers(lines),""}

.contract

  %h1
    ${_jed("Value List for Lending Contract No.")}
    ${id}
    ${_jed("from %s", moment(created_at).format(i18n.date.L))}
  .date
    ${$now = moment(),""}
    ${$now.format(i18n.date.L)}
    
  %section.parties
    .customer
      %label ${_jed("Borrower")}
      %span.name ${user.firstname} ${user.lastname} 
      %span.street ${user.address}
      %span.plz_city ${user.zip} ${user.city}
    .inventory_pool
      %label ${_jed("Lender")}
      %span.name ${inventory_pool.name}
      {{if inventory_pool.address}}
      %span.street ${inventory_pool.address.street}
      %span.plz_city ${inventory_pool.address.country_code}-${inventory_pool.address.zip_code} ${inventory_pool.address.city}
      {{/if}} 
    .clear
  
  {{if lines.length}}
  %section.list
    %table
      %thead
        %tr
          %td.consecutive_number ${_jed("No.")}
          %td.inventory_code ${_jed("Inventory Code")}
          %td.model_name ${_jed("Model")}
          %td.end_date ${_jed("End date")}
          %td.quantity ${_jed("Quantity")}
          %td.item_price ${_jed("Value")}
      %tbody
        {{each(i,line) lines}}
        %tr
          %td.consecutive_number 
            {{if line.consecutive_numbers.to}}
            ${line.consecutive_numbers.from}/${line.consecutive_numbers.to}
            {{else}}
            ${line.consecutive_numbers.from}
            {{/if}}
          %td.inventory_code ${line.item.inventory_code}
          %td.model_name ${line.model.name}
          %td.end_date ${moment(line.end_date).format(i18n.date.L)}
          %td.quantity ${line.quantity}
          %td.item_price {{html accounting.formatMoney(parseFloat(Number(line.item.price) * line.quantity))}}
        {{/each}}
      %tfoot.total
        %tr
          %td{:colspan => 4}
            ${_jed("Total")}
          %td.quantity
            {{html Underscore.reduce(lines, function(memo, line){ return memo + line.quantity; }, 0)}}
          %td.value
            {{html accounting.formatMoney(parseFloat(Underscore.reduce(lines, function(memo, line){ return memo + (Number(line.item.price) * line.quantity); }, 0)))}}
  {{/if}}
      